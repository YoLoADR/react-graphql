scalar DateTime
# schema.graphql contient votre schéma d'application . Le schéma d'application définit les opérations GraphQL que vous pouvez envoyer depuis le frontend. Nous allons examiner de plus près ce fichier dans un instant.
# Parmi les fichiers mentionnés, seul le schéma d'application défini dans server/src/schema.graphqlest pertinent pour vous en tant que développeur frontend. Ce fichier contient le schéma GraphQL qui définit toutes les opérations (requêtes, mutations et abonnements) que vous pouvez envoyer à partir de votre application frontale.

# La typeDefsconstante définit votre schéma GraphQL
# Le point d'exclamation dans la définition du type signifie que ce champ ne peut jamais être null.

type Query {
  info: String!
  feed(filter: String, skip: Int, first: Int, orderBy: LinkOrderByInput): Feed!
  getBookings(
    filter: String
    skip: Int
    first: Int
    orderBy: BookingOrderByInput
  ): FeedBooking!
}

# Récupère tous les liens du backend, notez que cette requête autorise également les arguments de filtrage, de tri et de pagination
type Feed {
  links: [Link!]!
  count: Int!
}

type FeedBooking {
  bookings: [Booking!]!
  count: Int!
}

# post: Permet aux utilisateurs authentifiés de créer un nouveau lien
# signup: Créer un compte pour un nouvel utilisateur
# login: Connecter un utilisateur existant
# vote: Permet aux utilisateurs authentifiés de voter pour un lien existant
type Mutation {
  post(url: String!, description: String!): Link!
  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
  vote(linkId: ID!): Vote!
  postBooking(carType: String, customer_name: String): Booking
  updateBooking(
    id: ID!
    tripdate: String
    trip_start_time: String
    trip_end_time: String
    customer_name: String
    carType: String
    vehicle_number: String
    driver_number: String
    passenger_number: String
    kilometer_number: String
    hour_number: String
    day_number: String
    pickupAddress: String
    pickupCity: String
    dropAddress: String
    dropCity: String
    driver_name: String
    status: String
    trip_cost: String
    discount: String
    payment_status: String
    comment: String
  ): Booking

  deleteBooking(id: ID!): Booking
}

type Link {
  id: ID!
  createdAt: DateTime!
  description: String!
  url: String!
  postedBy: User
  votes: [Vote!]!
}

type AuthPayload {
  token: String
  user: User
}

type User {
  id: ID!
  name: String!
  email: String!
  links: [Link!]!
}

type Booking {
  id: ID!
  tripdate: String
  trip_start_time: String
  trip_end_time: String
  customer_name: String
  carType: String
  vehicle_number: String
  driver_number: String
  passenger_number: String
  kilometer_number: String
  hour_number: String
  day_number: String
  pickupAddress: String
  pickupCity: String
  dropAddress: String
  dropCity: String
  driver_name: String
  status: String
  trip_cost: String
  discount: String
  payment_status: String
  createdAt: DateTime!
  comment: String
}

# newLink: Recevoir des mises à jour en temps réel lorsqu'un nouveau lien est créé
# newVote: Recevoir des mises à jour en temps réel lorsqu'un vote a été soumis
type Subscription {
  newLink: Link
  newVote: Vote
}

type Vote {
  id: ID!
  link: Link!
  user: User!
}

enum LinkOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

enum BookingOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

# login(email: String!, password: String!): AuthPayload
# login est une fonction que prend deux paramètre email et password. Les deux sont de type String et le point d'exclamation indique qui est obligatoire "!". Les deux points ":" suivi d'un type concerne le return en gros ils retournent une valeur de type AuthPayload
